<%- include("partials/head.ejs") %>
<%- include("partials/nav.ejs") %>

    <hr>
    <h1><%= title %></h1>
    <p><%= about %></p>
    <hr>

    <main id="contenedor-get">
        <!-- 
        Esta es la página HTML/EJS para modificar un producto existente.
        Primero, permite al usuario buscar un producto por su ID. Una vez que el producto es encontrado,
        se muestra un formulario pre-llenado con los datos actuales del producto.
        El usuario puede entonces modificar estos datos y enviarlos al backend para actualizar el producto
        la renderización del formulario de actualización y el envío de la solicitud PUT a la API.
        -->

        <div id="getProduct-container" class="crudForm-container">
            <h2>Consultar producto</h2>

            <form id="getProduct-form">
                <label for="idProd">Id producto</label>
                <input type="number" name="idProd" id="idProd" required>

                <input type="submit" value="Consultar producto">
            </form>
        </div>

        <div id="getId-container">
            <ul id="getId-list">
            </ul>
        </div>

        <div id="updateForm-container"></div>

    </main>

<%- include("partials/footer.ejs") %>

<script>
    const url = "http://localhost:3000/api";

    let getProduct_form = document.getElementById("getProduct-form");
    let getId_lista = document.getElementById("getId-list");
    let updateForm_container = document.getElementById("updateForm-container");

    getProduct_form.addEventListener("submit", async (event) => {
        event.preventDefault();

        try {
            getId_lista.innerHTML = "<p>Cargando producto...</p>";
            updateForm_container.innerHTML = ""; // Limpiar formulario de actualización previo

            let formData = new FormData(event.target);
            let data = Object.fromEntries(formData.entries());
            let idProd = data.idProd.trim();

            if (!idProd) {
                throw new Error(`El ID del producto no puede estar vacío.`);
            }

            let response = await fetch(`${url}/products/${idProd}`);
            let datos = await response.json();

            if (!response.ok || !datos.payload || datos.payload.length === 0) {
                getId_lista.innerHTML = `<p style="color: orange;">Producto con ID ${idProd} no encontrado.</p>`;
                console.warn(`Producto con ID ${idProd} no encontrado.`);
                return;
            }

            let producto = datos.payload[0];
            if (!producto || typeof producto !== 'object') {
                throw new Error("Formato de datos de producto inesperado de la API.");
            }

            const imageUrl = producto.imagen_producto && producto.imagen_producto !== '' ? producto.imagen_producto : '/img/placeholder.png';
            const imageAlt = producto.nombre_producto || 'Producto';

            let htmlProducto = `
                <li class="li-listados productos-listados">
                    <div class="li-listados_datos">
                        <p>Id: ${producto.id_producto} / Nombre: ${producto.nombre_producto} / <strong>Precio: $${producto.precio_producto}</strong></p>
                        <img src="${imageUrl}" alt="${imageAlt}" class="img-listados">
                    </div>
                    <div class="li-listados_boton">
                        <input class="listados_boton" id="updateProduct_button" type="button" value="Actualizar producto">
                    </div>
                </li>
            `;
            getId_lista.innerHTML = htmlProducto;

            let updateProduct_button = document.getElementById("updateProduct_button");
            if (updateProduct_button) {
                updateProduct_button.addEventListener("click", function(event) {
                    formularioPutProducto(event, producto);
                });
            } else {
                console.error("Error: Botón de actualizar producto no encontrado.");
            }

        } catch (error) {
            console.error("Error al obtener el producto: ", error);
            getId_lista.innerHTML = `<p style="color: red;">Error: ${error.message}</p>`;
        }
    });

    function formularioPutProducto(event, producto) {
        event.stopPropagation();
        console.log("Producto para formulario de actualización:", producto);

        // Se construye el HTML del formulario de actualización con los datos del producto
        // y se incluyen los campos 'description' y 'stock' para tu base de datos.
        let updateProductHtml = `
        <div id="updateProducts-container" class="crudForm-container">
            <h2>Actualizar producto</h2>

            <form id="updateProducts-form" autocomplete="off">

                <label for="idProdUpdate">Id</label>
                <input type="number" name="id" id="idProdUpdate" value="${producto.id_producto}" readonly>

                <label for="categoryProdUpdate">Categoria</label>
                <select name="category" id="categoryProdUpdate" required>
                    <option value="Instrumentos" ${producto.tipo_producto === 'Instrumentos' ? 'selected' : ''}>Instrumentos</option>
                    <option value="Vinilos" ${producto.tipo_producto === 'Vinilos' ? 'selected' : ''}>Vinilos</option>
                    <option value="Accesorios" ${producto.tipo_producto === 'Accesorios' ? 'selected' : ''}>Accesorios</option>
                    <option value="Software" ${producto.tipo_producto === 'Software' ? 'selected' : ''}>Software</option>
                </select>

                <label for="imagenProdUpdate">Imagen</label>
                <input type="text" name="image" id="imagenProdUpdate" value="${producto.imagen_producto || ''}" required>

                <label for="nombreProdUpdate">Nombre</label>
                <input type="text" name="name" id="nombreProdUpdate" value="${producto.nombre_producto}" required>

                <label for="precioProdUpdate">Precio</label>
                <input type="number" name="price" id="precioProdUpdate" value="${producto.precio_producto}" required>

                <label for="descripcionProdUpdate">Descripción</label>
                <textarea name="description" id="descripcionProdUpdate" rows="3">${producto.descripcion_producto || ''}</textarea>

                <label for="stockProdUpdate">Stock</label>
                <input type="number" name="stock" id="stockProdUpdate" value="${producto.stock_producto}" required>
                
                <input type="submit" value="Actualizar producto">
            </form>
        </div>
        `;

        updateForm_container.innerHTML = updateProductHtml;

        let updateProducts_form = document.getElementById("updateProducts-form");
        if (updateProducts_form) {
            updateProducts_form.addEventListener("submit", function(event) {
                actualizarProducto(event);
            });
        } else {
            console.error("Error: Formulario de actualización no encontrado después de renderizar.");
        }
    }

    async function actualizarProducto(event) {
        event.preventDefault();

        let formData = new FormData(event.target);
        // 'data' contendrá todos los campos del formulario, incluyendo los nuevos 'description' y 'stock'
        let data = Object.fromEntries(formData.entries());
        console.table("Datos a enviar para actualizar:", data);

        // Validar todos los campos requeridos, incluyendo los nuevos
        if(!data.id || !data.name || !data.image || !data.price || !data.category || data.description === undefined || data.stock === undefined) {
            alert("Todos los campos (id, nombre, imagen, precio, categoría, descripción, stock) son obligatorios para actualizar!");
            return;
        }

        try {
            let response = await fetch(`${url}/products`, {
                method: "PUT",
                headers: {
                    "Content-type" : "application/json",
                },
                body: JSON.stringify(data) // Se envía el objeto 'data' completo
            });

            if(response.ok) {
                console.log("Respuesta de actualización exitosa:", response);
                let result = await response.json();
                console.log("Mensaje del servidor:", result.message);
                alert(result.message);

                getId_lista.innerHTML = ""; // Limpia la lista y el formulario de actualización
                updateForm_container.innerHTML = "";

            } else {
                let error = await response.json();
                console.error("Error del servidor:", error.message);
                alert(`Error al actualizar producto: ${error.message}`);
            }

        } catch (error) {
            console.error("Error en la solicitud PUT:", error);
            alert("Error al procesar la solicitud: " + error.message);
        }
    }
</script>
